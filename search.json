[{"title":"Kotlin笔记02","date":"2021-05-02T08:19:06.000Z","url":"/2021/05/02/Kotlin%E7%AC%94%E8%AE%B002/","tags":[["Kotlin","/tags/Kotlin/"]],"categories":[["Kotlin","/categories/Kotlin/"]],"content":"​ Kotlin也是面向对象的语言，下面就聊聊Kotlin的面向对象编程 类与对象首先右击包名，New -&gt; Kotlin File/Class，选择class，命名类名为Person，一个类就创建好了。 然后添加关键字 name,age。还有方法eat kotlin实例化 kotlin的实例化是不需要写new的，因为当调用某个类的构造函数时，你的意图只能是对这个类进行实例化。 然后就可以使用这个对象啦 继承和构造函数现在可以创建一个Student类，去继承Person。 继承首先需要把Person类改成可以被继承。 为什么要改为可以被继承？ 在kotlin中任何一个非抽象类默认都是不可以被继承的，相当于java中给类添加了final关键字。这么做的原因和val的设计概念是一样的，由于无法预知子类会如何实现，可能会导致很多未知风险，因此默认是禁止被继承的。 改成可以被继承也很简单，在class前面加上open即可 然后就是继承了 冒号就是继承，后面跟的是父类的构造函数。实现接口也是用的冒号，多个接口则是逗号隔开。 主构造函数每个类默认都会有一个主构造函数，当然也可以显式地写指明参数。主构造函数的特点是没有函数体，直接定义在类名后面即可 将学号和年级这两个字段放在柱构造函数中，表明在实例化的时候必须传入参数。 那么问题来了，如果需要在主构造函数中写一些逻辑怎么办呢？不慌，kotlin提供了一个init结构体。 那么为什么后面Person也有括号呢，这个涉及到了java的继承特性，子类中的构造函数必须调用父类的构造函数。这个规定kotlin也必须遵守。子类的主构造函数调用父类的哪个构造函数，在继承的时候通过括号来指定。 那么现在改一下Person类 这时候Student类会报错，因为找不到了Person()无参数的构造函数，因此需要改成 注意：在Student类的主构造函数中增加name和age这两个字段的时候，不能声明成val，因为在主构造函数中声明成val或var的参数将自动成为该类的字段，这将导致和父类同名的name和age字段造成冲突 次构造函数几乎用不到，任何一个类只能有一个主构造函数，但可以有多个次构造函数。次构造函数也可以用于实例化一个类，只不过他是有函数体的。 次构造函数是通过constructor来定义的，这里定义了两个次构造函数，第一个接受了name和age，调用了主构造函数。第二个没有参数，调用的第一个次构造函数。这样之后，就可以这样实例化了 十分少见的情况，没有主构造函数，但是有次构造函数 接口接口的定义和java没啥区别 接口的使用 kotlin中继承和实现都是用的冒号，多实现用逗号隔开，接口是不需要加括号的，因为他没有构造函数可调用。 java和kotlin 修饰符的异同java: private public protected default kotlin: private public protected internal 修饰符 异同 private 两种语言是一样的，只对当前类内部可见 public Kotlin中默认是public，java则是default protected java中是当前类，子类，同一包路径下的类可见Kotlin则是只对当前类，子类可见 internal kotlin抛弃了java中的default(同一包路径下的类可见)，用的internal只对同一模块中的类可见 table th:first-of-type{ width:150px; } "},{"title":"Kotlin笔记01(变量，函数，逻辑控制)","date":"2021-05-02T05:23:01.000Z","url":"/2021/05/02/Kotlin%E7%AC%94%E8%AE%B001/","tags":[["Kotlin","/tags/Kotlin/"]],"categories":[["Kotlin","/categories/Kotlin/"]],"content":"​ 写过Android的童鞋，应该都听说过kotlin，谷歌也是极力推荐使用kotlin来写Android。kotlin有着很多的优点，比如：代码精简，空指针异常判断，协程的优势等等。我是看了郭霖大佬《第一行代码Android》第三版之后，当初笔记是写在代码里的，现在把代码重新梳理一遍，写到博客里，顺道照着书再复习一遍Android和kotlin。虽然很多公司仍然用的java写的Android，但是技多不压身嘛嘻嘻。这个笔记只是记录kotlin相关的学习。 Kotlin简介 kotlin是jetBrains公司开发与设计的，因此现在IntelliJ IDEA本身就加入了kotlin支持。 kotlin和java是可以共存的，像Android当中，可以同时拥有.kt文件也可以有.java文件，为什么呢？ 首先先搞明白java是 编译型语言 还是 解释型语言。虽然java是先编译后运行，但是他并不是编译型语言。因为java编译之后生成的是class文件，class文件则是放入java虚拟机识别，虚拟机担任的是解释器的角色，class文件解释成二进制数据让计算机执行 java虚拟机只是与class文件打交道，它不关心class文件是哪里来的，因此java与kotlin共存的原理也就了解了，不论是java还是kotlin他们编译生成的文件都是class文件。 第一个HelloKotlin 首先安装IDEA，这个直接官网下载就可以了。打开IDEA ，File-&gt;new Project，选择Kotlin，然后next，写项目名称，然后finish就可以啦。在项目目录下，src右击-&gt; New -&gt; Kotlin file/Class，填写文件名字，类型选择File即可。然后输入以上代码，第一个Hello Kotlin就ok了 变量和函数变量kotlin的变量和java有很大的不同，java中定义变量需要具体声明变量类型，而kotlin只有两种val和var。因为kotlin拥有很优秀的类型推导机制。 注意： kotlin代码是不用写分号的，其实写了也没关系，编译器直接无视掉了 kotlin的类型推导也不总是正常工作的，比如某个变量需要延迟赋值的话仍然需要显示声明变量类型才可以 注意：永远优先使用val，val无法满足需求的时候再改var。 在java中除非主动设定final，否则这个变量一直是可变的。当项目变得复杂的时候，永远不知道这个变量什么时候被谁改掉了，容易导致各种问题，kotlin强制要求必须让开发者主动声明变量是否可变。 函数 语法规则： fun 方法名(参数) : 返回值类型{} 参数格式：参数名:参数类型 无返回值就不写返回值类型，不用写return。 语法糖： 这也是我比较喜欢kotlin的一方面，可以少写很多东西(oﾟ▽ﾟ)o ，越往后学，就会发现很多看起来很复杂的代码，改到kotlin当中，轻轻松松没几行就完成了。 逻辑控制if条件语句kotlin的条件语句有两种实现方式 if 和 when kotlin的if和java的基本没区别 Kotlin的if语句相比java还有一个额外的功能，他是可以有返回值的 if语句将每个条件的最后一行代码作为返回值，并将返回值赋值给了value变量。最终将value变量返回。当然以上代码还可以更加精简。 继续简化 是不是觉得kotlin的简化爽的一批。。。 when语句会java的同学，应该了解switch语句吧，非常不好用，只能传整型变量最为条件，一个一个case比对，还必须每个case写break，十分不爽。那么看了kotlin的when语句解决了以上问题 写个例子：输入学生姓名，返回对应的成绩分数 上面使用了if判断学生姓名，返回分数，用了很多if，else，这个时候就可以考虑使用when了 清清爽爽，而且when语句和if一样也是可以有返回值的，因此也可以用语法糖。 when语句可以使用任意类型的参数，包括类型匹配 循环语句"}]